#!/usr/bin/env bash
# This script uses Vagrant to provision a test virtual machine(s).
# To select a machine for testing, give its name as an argument to this script.
# To select a test to run, provide its path as an argument.

set -eu

# Check if a specific Vagrant box is currently up.
is_vagrant_box_up() {
    local box="$1"
    test $(vagrant status --machine-readable "${box}" | grep ',state,running' | wc -l) -gt 0
}

# Check if a specific snapshot for a specific Vagrant box is currently present.
is_snapshot_present () {
    local box="$1"
    local snapshot="$2"
    test $(vagrant snapshot list --machine-readable "${box}" | grep "ui,output,${snapshot}" | wc -l) -gt 0
}

# 'Stolen' from configuration for Travis CI seen in many Ansible roles.
{
  echo '[defaults]'
  echo 'roles_path = ../../'
  echo 'host_key_checking = False'
  echo 'retry_files_save_path = /tmp'
  echo 'deprecation_warnings = True'
} > ansible.cfg

DEBUG=no
PURGE=yes

while getopts ":dvl:" opt
do
    case $opt in
        v)
            PURGE=no
            ;;
        d)
            DEBUG=yes
            ;;
        l)
            LIMIT+=" ${OPTARG}"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        : )
            echo "Invalid Option: -$OPTARG requires an argument" >&2
            exit 1
            ;;
    esac
done

shift $((OPTIND -1))

all=$(vagrant status --machine-readable | grep ,state, | cut -d, -f2)
boxes=${LIMIT:-$all}
snapshot=fresh-for-testing


# Prepare virtual machines for testing.
# It means to make sure a specifically names snapshot is present.

echo "Starting tests for '$(echo ${boxes})'"

# Check the syntax of the tests first.

if [ "$#" -eq 0 ]
then
  set -- tests/test*.yml
fi

for test
do
  # First check syntax.
  echo Checking syntax of "'${test}'"
  ansible-playbook -ilocalhost, "${test}" --syntax-check
done

echo 'Preparing virtual machine(s) for tests'

for vbox in ${boxes}
do
  echo "Making sure '${vbox}' is prepared for tests"
  if ! is_snapshot_present "${vbox}" "${snapshot}"
  then
    echo "Starting '${vbox}' for preparation for tests"
    vagrant up "${vbox}" >/dev/null
    if [ -f tests/pre_test.yml ]
    then
      echo "Configuring '${vbox}' for the tests"
      ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
        -i ./.vagrant/provisioners/ansible/inventory \
        tests/pre_test.yml \
        --limit "${vbox}"
    fi
    echo "Stopping '${vbox}' before taking a snapshot"
    vagrant halt "${vbox}" >/dev/null
    echo "Taking a snapshot of '${vbox}' with a fresh installation"
    vagrant snapshot save "${vbox}" "${snapshot}" >/dev/null
  fi
done

for test
do
  for vbox in ${boxes}
  do
    echo Running test "'${test}'" for "'${vbox}'"
    if ! is_vagrant_box_up "${vbox}"
    then
      echo -n 'Machine is not running, will '
      if [ "x${DEBUG}" = 'xyes' ]
      then
        echo 'start it'
        vagrant up --provision "${vbox}" >/dev/null
      else
        echo 'restore it to a clean state'
        vagrant snapshot restore --provision "${vbox}" "${snapshot}" >/dev/null
      fi
    fi
    ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
      -i ./.vagrant/provisioners/ansible/inventory "${test}" \
      --limit "${vbox}"

    # Idempotence test.
    echo -n Idempotence test "'${test}'" for "'${vbox}': "
    ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
      -i ./.vagrant/provisioners/ansible/inventory "${test}" \
      --skip-tags jdk-zulu-enterprise-credentials \
      --limit "${vbox}" | grep -q 'changed=0.*failed=0' \
      && (echo 'pass' && exit 0) \
      || (echo 'fail' && exit 1)

    if [ "x${DEBUG}" = 'xyes' ]
    then
      echo "'${vbox}' virtual machine is left up for inspection, if necessary"
    else
      vagrant halt -f "${vbox}" >/dev/null
    fi
  done
done

if [ "x${DEBUG}" != 'xyes' -a "x${PURGE}" = 'xyes' ]
then
  echo "Destroying virtual machine(s) after tests"
  vagrant destroy -f ${boxes}
fi
